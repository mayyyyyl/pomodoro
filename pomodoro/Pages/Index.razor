@page "/"

@using System.Globalization
@using System.IO;
@using CsvHelper;
@using System.Text

@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Pomodoro Timer</h3>

<EditForm Model="@PomodoroSetting" OnValidSubmit="StartPomodoro">
    <div>
        <label for="workDuration">Work Duration (minutes):</label>
        <InputNumber id="workDuration" @bind-Value="PomodoroSetting.WorkDuration" />
    </div>
    <div>
        <label for="breakDuration">Break Duration (minutes):</label>
        <InputNumber id="breakDuration" @bind-Value="PomodoroSetting.BreakDuration" />
    </div>
    <button type="submit">Start Pomodoro</button>
    <p>Temps total de travail: @TotalWorkMinutes minutes</p>
</EditForm>

@if (IsSessionActive)
{
    <h4>@(isWorkSession ? "Work Session" : "Break Session")</h4>
    <p>@($"{RemainingTime / 60:D2}:{RemainingTime % 60:D2}")</p>
    <div class="progress-bar">
        <div class="progress" style="width:@((1 - (double)RemainingTime / initialTime) * 100)%"></div>
    </div>
    <button @onclick="StopPomodoro">Stop</button>
}

<h3>Session Statistics</h3>
<ul>
    @foreach (var session in sessions)
    {
        <li>@session</li>
    }
</ul>

<style>
    .progress-bar {
        width: 100%;
        background-color: #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
    }

    .progress {
        height: 20px;
        background-color: #76c7c0;
        width: 0;
        transition: width 0.5s ease;
    }
</style>

@code {
    private bool isWorkSession = true;
    private int initialTime;
    private System.Timers.Timer? timer;
    private readonly List<string> sessions = new List<string>();
    private bool loadData = true;
    private readonly string csvFilePath = "pomodoro.csv";
    private List<string> sessionHistory = new List<string>();
    private int remainingTime;
    private int totalWorkMinutes = 0;
    private bool isSessionActive = false;
    private PomodoroSettings pomodoroSettings = new PomodoroSettings();

    public bool IsSessionActive { get; set; } = false;
    public PomodoroSettings PomodoroSetting { get; set; } = new PomodoroSettings();
    public int RemainingTime { get; set; } = 0;
    public int TotalWorkMinutes { get; set; } = 0;
    public List<string> SessionHistory { get; set; } = new List<string>();

    public void StartPomodoro()
    {
        IsSessionActive = true;
        isWorkSession = true;
        initialTime = remainingTime = pomodoroSettings.WorkDuration * 60;
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += OnTimerElapsed;
        timer.Start();
    }

    public void StopPomodoro()
    {
        timer.Stop();
        IsSessionActive = false;
        RemainingTime = 0;
        StateHasChanged();
    }

    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        RemainingTime--;
        InvokeAsync(StateHasChanged);

        if (RemainingTime <= 0)
        {
            SessionHistory.Add($"{(isWorkSession ? "Work" : "Break")} session completed at {DateTime.Now}");
            SaveHistory();

            if (isWorkSession)
            {
                UpdateWorkTime();
                RemainingTime = pomodoroSettings.BreakDuration * 60;
                initialTime = RemainingTime;
                isWorkSession = false;
            }
            else
            {
                timer.Stop();
                IsSessionActive = false;
            }
        }
    }

    public void CleanupTimer()
    {
        timer?.Dispose();
    }

    public class PomodoroSettings
    {
        public int WorkDuration { get; set; } = 25;
        public int BreakDuration { get; set; } = 5;
    }

    public void UpdateWorkTime()
    {
        TotalWorkMinutes += pomodoroSettings.WorkDuration;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && loadData)
        {
            SessionHistory = await localStorage.GetItemAsync<List<string>>("sessions") ?? new List<string>();
            TotalWorkMinutes = await localStorage.GetItemAsync<int>("TotalWorkMinutes");
            loadData = false;
            StateHasChanged();
        }
    }

    public void SaveHistory()
    {
        try
        {
            var csv = new StringBuilder();
            foreach (var session in SessionHistory)
            {
                csv.AppendLine(session);
            }
            File.WriteAllText(csvFilePath, csv.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la sauvegarde de l'historique : {ex.Message}");
        }
    }
}