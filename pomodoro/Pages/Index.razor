@page "/"

<h3>Pomodoro Timer</h3>

<EditForm Model="@pomodoroSettings" OnValidSubmit="StartPomodoro">
    <div>
        <label for="workDuration">Work Duration (minutes):</label>
        <InputNumber id="workDuration" @bind-Value="pomodoroSettings.WorkDuration" />
    </div>
    <div>
        <label for="breakDuration">Break Duration (minutes):</label>
        <InputNumber id="breakDuration" @bind-Value="pomodoroSettings.BreakDuration" />
    </div>
    <button type="submit">Start Pomodoro</button>
</EditForm>

@if (isSessionActive)
{
    <h4>@(isWorkSession ? "Work Session" : "Break Session")</h4>
    <p>@($"{remainingTime / 60:D2}:{remainingTime % 60:D2}")</p>
    <div class="progress-bar">
        <div class="progress" style="width:@((1 - (double)remainingTime / initialTime) * 100)%"></div>
    </div>
    <button @onclick="StopPomodoro">Stop</button>
}

<h3>Session Statistics</h3>
<ul>
    @foreach (var session in sessions)
    {
        <li>@session</li>
    }
</ul>

<style>
    .progress-bar {
        width: 100%;
        background-color: #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
    }

    .progress {
        height: 20px;
        background-color: #76c7c0;
        width: 0;
        transition: width 1s linear;
    }
</style>

@code {
    private PomodoroSettings pomodoroSettings = new PomodoroSettings();
    private bool isSessionActive = false;
    private bool isWorkSession = true;
    private int remainingTime;
    private int initialTime;
    private System.Timers.Timer timer;
    private List<string> sessions = new List<string>();

    private void StartPomodoro()
    {
        isSessionActive = true;
        isWorkSession = true;
        initialTime = remainingTime = pomodoroSettings.WorkDuration * 60;
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += OnTimerElapsed;
        timer.Start();
    }

    private void StopPomodoro()
    {
        timer.Stop();
        isSessionActive = false;
        remainingTime = 0;
        StateHasChanged();
    }

    private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        remainingTime--;
        InvokeAsync(StateHasChanged);

        if (remainingTime <= 0)
        {
            if (isWorkSession)
            {
                sessions.Add($"Work session completed at {DateTime.Now}");
                remainingTime = pomodoroSettings.BreakDuration * 60;
                initialTime = remainingTime;
                isWorkSession = false;
            }
            else
            {
                sessions.Add($"Break session completed at {DateTime.Now}");
                timer.Stop();
                isSessionActive = false;
            }
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private class PomodoroSettings
    {
        public int WorkDuration { get; set; } = 25; // Default to 25 minutes
        public int BreakDuration { get; set; } = 5; // Default to 5 minutes
    }
}